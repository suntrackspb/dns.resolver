// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let lastResults = { subdomains: [], ips: [], grouped: [] };
let showIPDetails = true;
let dnsCache = new Map();

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å IP
function ipToNumber(ip) {
  return ip.split('.').reduce((acc, octet) => (acc << 8) + parseInt(octet), 0) >>> 0;
}

function numberToIp(num) {
  return [
    (num >>> 24) & 255,
    (num >>> 16) & 255,
    (num >>> 8) & 255,
    num & 255
  ].join('.');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ IP –ø–æ –ø–æ–¥—Å–µ—Ç—è–º
function groupIPsBySubnet(ips) {
  if (!ips.length) return [];
  
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
  const groups = new Map();
  
  ips.forEach(ip => {
    const parts = ip.split('.').map(p => parseInt(p));
    const [a, b, c, d] = parts;
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –º–∞—Å–∫–∞–º –ø–æ–¥—Å–µ—Ç–µ–π
    const groupKeys = [
      `${a}.${b}.${c}`, // /24 –º–∞—Å–∫–∞
      `${a}.${b}`,      // /16 –º–∞—Å–∫–∞  
      `${a}`            // /8 –º–∞—Å–∫–∞
    ];
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –≥—Ä—É–ø–ø—É
    let bestGroup = null;
    for (const key of groupKeys) {
      if (!groups.has(key)) {
        groups.set(key, []);
      }
      groups.get(key).push(ip);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ —Å –±–æ–ª–µ–µ —á–µ–º 1 IP, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
      if (!bestGroup && groups.get(key).length > 1) {
        bestGroup = key;
      }
    }
  });
  
  const result = [];
  const processedIPs = new Set();
  
  // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ /24
  for (const [key, groupIps] of groups.entries()) {
    if (key.split('.').length === 3 && groupIps.length >= 2) {
      const uniqueIps = [...new Set(groupIps)];
      if (uniqueIps.some(ip => !processedIPs.has(ip))) {
        const subnet = calculateOptimalSubnet(uniqueIps);
        result.push(subnet);
        uniqueIps.forEach(ip => processedIPs.add(ip));
      }
    }
  }
  
  // –ó–∞—Ç–µ–º –≥—Ä—É–ø–ø—ã –ø–æ /16
  for (const [key, groupIps] of groups.entries()) {
    if (key.split('.').length === 2 && groupIps.length >= 3) {
      const uniqueIps = [...new Set(groupIps)].filter(ip => !processedIPs.has(ip));
      if (uniqueIps.length >= 2) {
        const subnet = calculateOptimalSubnet(uniqueIps);
        result.push(subnet);
        uniqueIps.forEach(ip => processedIPs.add(ip));
      }
    }
  }
  
  // –û—Å—Ç–∞–≤—à–∏–µ—Å—è IP –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ /32
  ips.forEach(ip => {
    if (!processedIPs.has(ip)) {
      result.push({
        subnet: ip + '/32',
        ips: [ip]
      });
    }
  });
  
  return result.sort((a, b) => {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ IP –∞–¥—Ä–µ—Å—É
    const aIP = a.ips[0].split('.').map(n => parseInt(n));
    const bIP = b.ips[0].split('.').map(n => parseInt(n));
    
    for (let i = 0; i < 4; i++) {
      if (aIP[i] !== bIP[i]) {
        return aIP[i] - bIP[i];
      }
    }
    return 0;
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø–æ–¥—Å–µ—Ç–∏
function calculateOptimalSubnet(ips) {
  if (ips.length === 1) {
    return { subnet: ips[0] + '/32', ips: ips };
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º IP –≤ —á–∏—Å–ª–∞
  const numbers = ips.map(ip => {
    const parts = ip.split('.').map(p => parseInt(p));
    return (parts[0] << 24) + (parts[1] << 16) + (parts[2] << 8) + parts[3];
  });
  
  const min = Math.min(...numbers);
  const max = Math.max(...numbers);
  
  // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö –±–∏—Ç–æ–≤
  let mask = 32;
  let diff = min ^ max;
  
  while (diff > 0) {
    diff >>>= 1;
    mask--;
  }
  
  // –í—ã—á–∏—Å–ª—è–µ–º —Å–µ—Ç–µ–≤–æ–π –∞–¥—Ä–µ—Å
  const network = min & (0xFFFFFFFF << (32 - mask));
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ IP
  const networkIP = [
    (network >>> 24) & 255,
    (network >>> 16) & 255,
    (network >>> 8) & 255,
    network & 255
  ].join('.');
  
  return {
    subnet: `${networkIP}/${mask}`,
    ips: ips.sort((a, b) => {
      const aNum = a.split('.').map(n => parseInt(n));
      const bNum = b.split('.').map(n => parseInt(n));
      for (let i = 0; i < 4; i++) {
        if (aNum[i] !== bNum[i]) return aNum[i] - bNum[i];
      }
      return 0;
    })
  };
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function fetchSubdomainsFromCRT(domain) {
  const url = `https://crt.sh/?q=%25.${domain}&output=json`;
  try {
    const res = await fetch(url);
    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${res.status}`);
    const data = await res.json();

    const subdomains = new Set();
    data.forEach(entry => {
      const lines = entry.name_value.split('\n');
      lines.forEach(line => {
        if (line.endsWith(domain)) subdomains.add(line.trim());
      });
    });

    return Array.from(subdomains).sort();
  } catch (err) {
    console.error(err);
    return [];
  }
}

async function resolveIP(subdomain) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  if (dnsCache.has(subdomain)) {
    return dnsCache.get(subdomain);
  }
  
  const dnsUrl = `https://dns.google/resolve?name=${subdomain}&type=A`;
  try {
    const res = await fetch(dnsUrl);
    const data = await res.json();
    let ips = [];
    
    if (data.Answer) {
      ips = data.Answer
        .filter(ans => ans.type === 1)
        .map(ans => ans.data);
    }
    
    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    dnsCache.set(subdomain, ips);
    return ips;
  } catch (err) {
    dnsCache.set(subdomain, []);
    return [];
  }
}

// –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ DNS —Å –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–æ–º
async function resolveIPsParallel(subdomains) {
  const progressContainer = document.getElementById('progressContainer');
  const progressBar = document.getElementById('progressBar');
  const progressText = document.getElementById('progressText');
  
  progressContainer.style.display = 'block';
  progressBar.style.width = '0%';
  progressText.textContent = '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–æ–≤...';
  
  const batchSize = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  const results = [];
  
  for (let i = 0; i < subdomains.length; i += batchSize) {
    const batch = subdomains.slice(i, i + batchSize);
    const batchPromises = batch.map(subdomain => resolveIP(subdomain));
    
    const batchResults = await Promise.all(batchPromises);
    results.push(...batchResults);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    const progress = Math.min(100, ((i + batchSize) / subdomains.length) * 100);
    progressBar.style.width = progress + '%';
    progressText.textContent = `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${Math.min(i + batchSize, subdomains.length)} –∏–∑ ${subdomains.length} –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤`;
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
    if (i + batchSize < subdomains.length) {
      await new Promise(resolve => setTimeout(resolve, 200));
    }
  }
  
  progressContainer.style.display = 'none';
  return results;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function formatSubdomainResults(subdomains) {
  if (!subdomains.length) return '‚ùå –ü–æ–¥–¥–æ–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
  
  let result = `‚úÖ –ù–∞–π–¥–µ–Ω–æ ${subdomains.length} –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤:\n\n`;
  subdomains.forEach(subdomain => {
    result += `${subdomain}\n`;
  });
  
  return result;
}

function formatIPResults(ips, showDetails = false) {
  if (!ips.length) return '‚ùå IP-–∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
  
  const grouped = groupIPsBySubnet(ips);
  let result = `‚úÖ –ù–∞–π–¥–µ–Ω–æ ${ips.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤:\n\n`;
  
  result += 'üìä –ü–û–î–°–ï–¢–ò (CIDR):\n';
  grouped.forEach(group => {
    result += `${group.subnet}\n`;
  });
  
  if (showDetails) {
    result += '\nüìã –î–ï–¢–ê–õ–ò –ü–û –ü–û–î–°–ï–¢–Ø–ú:\n';
    grouped.forEach(group => {
      if (group.ips.length > 1) {
        result += `\n${group.subnet}:\n`;
        group.ips.forEach(ip => result += `  ‚Ä¢ ${ip}\n`);
      }
    });
  }
  
  result += '\n' + '‚îÄ'.repeat(40) + '\n';
  result += 'üìù –í–°–ï IP (–ø–æ—Å—Ç—Ä–æ—á–Ω–æ):\n';
  ips.forEach(ip => result += `${ip}\n`);
  
  lastResults.grouped = grouped;
  return result;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
async function search() {
  const domain = document.getElementById('domainInput').value.trim();
  const subOutput = document.getElementById('subOutput');
  const ipOutput = document.getElementById('ipOutput');
  
  if (!domain) {
    alert('–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞');
    return;
  }
  
  // –°–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  subOutput.textContent = `üîç –ü–æ–∏—Å–∫ –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤ –¥–ª—è ${domain} —á–µ—Ä–µ–∑ crt.sh...`;
  ipOutput.textContent = `üåê –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è IP...`;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–¥–æ–º–µ–Ω—ã
    const subdomains = await fetchSubdomainsFromCRT(domain);
    
    if (!subdomains.length) {
      subOutput.textContent = '‚ùå –ü–æ–¥–¥–æ–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
      ipOutput.textContent = '';
      lastResults = { subdomains: [], ips: [], grouped: [] };
      return;
    }
    
    subOutput.textContent = formatSubdomainResults(subdomains);
    
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ IP
    const ipResults = await resolveIPsParallel(subdomains);
    
    // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ IP
    const ipSet = new Set();
    ipResults.forEach(ips => {
      ips.forEach(ip => ipSet.add(ip));
    });
    
    const sortedIPs = Array.from(ipSet).sort();
    ipOutput.textContent = formatIPResults(sortedIPs, showIPDetails);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    lastResults = {
      domain,
      subdomains,
      ips: sortedIPs,
      grouped: groupIPsBySubnet(sortedIPs)
    };
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
    subOutput.textContent = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ';
    ipOutput.textContent = '';
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
function toggleIPView() {
  showIPDetails = !showIPDetails;
  const toggleBtn = document.getElementById('toggleBtn');
  toggleBtn.textContent = showIPDetails ? '–ü—Ä–æ—Å—Ç–æ–π –≤–∏–¥ IP' : '–î–µ—Ç–∞–ª—å–Ω—ã–π –≤–∏–¥ IP';
  
  if (lastResults.ips.length > 0) {
    const ipOutput = document.getElementById('ipOutput');
    ipOutput.textContent = formatIPResults(lastResults.ips, showIPDetails);
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
function copyToClipboard(elementId) {
  const element = document.getElementById(elementId);
  navigator.clipboard.writeText(element.textContent)
    .then(() => showNotification("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!"))
    .catch(err => showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏", "error"));
}

function copyCIDROnly() {
  if (!lastResults.grouped.length) {
    showNotification("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", "error");
    return;
  }
  
  const cidrList = lastResults.grouped.map(group => group.subnet).join('\n');
  navigator.clipboard.writeText(cidrList)
    .then(() => showNotification("CIDR –ø–æ–¥—Å–µ—Ç–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!"))
    .catch(err => showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏", "error"));
}

function copyIPsOnly() {
  if (!lastResults.ips.length) {
    showNotification("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", "error");
    return;
  }
  
  const ipList = lastResults.ips.join('\n');
  navigator.clipboard.writeText(ipList)
    .then(() => showNotification("IP –∞–¥—Ä–µ—Å–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!"))
    .catch(err => showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏", "error"));
}

// –§—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
function exportToJSON(type) {
  if (!lastResults.domain) {
    showNotification("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", "error");
    return;
  }
  
  let data;
  let filename;
  
  switch (type) {
    case 'cidr':
      // –§–æ—Ä–º–∞—Ç: –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å hostname (CIDR) –∏ –ø—É—Å—Ç—ã–º ip
      data = lastResults.grouped.map(group => ({
        hostname: group.subnet,
        ip: ""
      }));
      filename = `${lastResults.domain}_cidr_${new Date().toISOString().split('T')[0]}.json`;
      break;
      
    case 'ips':
      // –§–æ—Ä–º–∞—Ç: –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å hostname (IP/32) –∏ –ø—É—Å—Ç—ã–º ip
      data = lastResults.ips.map(ip => ({
        hostname: ip + "/32",
        ip: ""
      }));
      filename = `${lastResults.domain}_ips_${new Date().toISOString().split('T')[0]}.json`;
      break;
      
    case 'full':
      // –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç - –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Å–µ—Ç–µ–π –∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö IP
      const fullList = [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–µ—Ç–∏
      lastResults.grouped.forEach(group => {
        fullList.push({
          hostname: group.subnet,
          ip: ""
        });
      });
      
      data = fullList;
      filename = `${lastResults.domain}_full_${new Date().toISOString().split('T')[0]}.json`;
      break;
  }
  
  downloadJSON(data, filename);
}

function downloadJSON(data, filename) {
  const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
  
  showNotification(`–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${filename}`);
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = "success") {
  // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const notification = document.createElement('div');
  notification.className = `notification ${type}`;
  notification.textContent = message;
  notification.style.cssText = `
    position: fixed;
    top: 80px;
    right: 20px;
    padding: 1em 1.5em;
    background: ${type === 'error' ? '#e74c3c' : '#27ae60'};
    color: white;
    border-radius: 6px;
    z-index: 1000;
    animation: slideIn 0.3s ease;
  `;
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    notification.style.animation = 'slideOut 0.3s ease';
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }, 3000);
}

// CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const style = document.createElement('style');
style.textContent = `
  @keyframes slideIn {
    from { transform: translateX(100%); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
  }
  @keyframes slideOut {
    from { transform: translateX(0); opacity: 1; }
    to { transform: translateX(100%); opacity: 0; }
  }
`;
document.head.appendChild(style);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
document.addEventListener('DOMContentLoaded', function() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
  initializeTheme();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
  const domainInput = document.getElementById('domainInput');
  if (domainInput) {
    domainInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        search();
      }
    });
  }
});

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–æ–π
function getTheme() {
  return localStorage.getItem('theme') || 'light';
}

function setTheme(theme) {
  localStorage.setItem('theme', theme);
  document.documentElement.setAttribute('data-theme', theme);
  
  const themeIcon = document.getElementById('themeIcon');
  if (themeIcon) {
    themeIcon.textContent = theme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
  }
}

function toggleTheme() {
  const currentTheme = getTheme();
  const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
  setTheme(newTheme);
  
  showNotification(
    `–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ ${newTheme === 'dark' ? '—Ç–µ–º–Ω—É—é' : '—Å–≤–µ—Ç–ª—É—é'} —Ç–µ–º—É`,
    'success'
  );
}

function initializeTheme() {
  const savedTheme = getTheme();
  setTheme(savedTheme);
} 